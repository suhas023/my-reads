{"version":3,"sources":["components/BooksList.js","components/Compartment.js","components/BookShelf.js","api/BooksAPI.js","components/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["Book","props","react_default","a","createElement","className","style","backgroundImage","concat","book","imageLinks","thumbnail","backgroundPosition","backgroundSize","backgroundRepeat","onChange","e","changeShelf","target","value","defaultValue","shelf","disabled","title","authors","BooksList","books","map","key","id","Compartment","name","components_BooksList","BookShelf","shelfs","filter","length","components_Compartment","Link","to","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","fetch","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","SearchPage","state","shelfBooks","newBooks","onQueryChange","_this","setState","bookAPI","escapeRegExp","trim","error","booksID","includes","push","newShelf","inShelf","removeFromOldShelf","b","toConsumableArray","this","placeholder","Component","App","currentlyReading","wantToRead","read","validShelfs","defineProperty","addToNewShelf","bookAPi","getBooksID","forEach","_this2","_this3","Route","exact","path","render","components_BookShelf","assign","components_SearchPage","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee1223dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/BooksList.css';\r\n\r\nfunction BooksList(props) {\r\n  return (\r\n    <ul className=\"books-list\">\r\n      {\r\n        props.books.map(book => \r\n          <li key={book.id}>\r\n            <Book \r\n              book={book} \r\n              changeShelf={props.changeShelf}\r\n            />\r\n          </li>\r\n        )\r\n      }\r\n    </ul>\r\n  );\r\n}\r\n\r\nfunction Book(props) {\r\n  return (\r\n    <div className=\"book\">\r\n      <div className=\"book-top\">\r\n        <div \r\n          className=\"book-cover\"\r\n          style={{backgroundImage: `url(${props.book.imageLinks && props.book.imageLinks.thumbnail})`,\r\n            backgroundPosition: 'center',\r\n            backgroundSize: 'cover',\r\n            backgroundRepeat: 'noRepeat',}}\r\n        >\r\n        </div>\r\n        <div className=\"book-shelf-changer\">\r\n          <select \r\n            onChange={(e) => props.changeShelf(props.book, e.target.value)}\r\n            defaultValue={props.book.shelf || 'none'}\r\n          >\r\n            <option value=\"move\" disabled>Move to...</option>\r\n            <option value=\"currentlyReading\">Currently Reading</option>\r\n            <option value=\"wantToRead\">Want to Read</option>\r\n            <option value=\"read\">Read</option>\r\n            <option value=\"none\">None</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"book-title\">{props.book.title}</div>\r\n      <div className=\"book-authors\">{props.book.authors}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BooksList;","import React from 'react';\r\nimport BooksList from './BooksList';\r\nimport '../styles/Compartment.css';\r\n\r\nfunction Compartment(props) {\r\n  let name;\r\n  switch(props.name) {\r\n    case 'currentlyReading': name = 'Currently Reading'; break;\r\n    case 'wantToRead': name = 'Want To Read'; break;\r\n    case 'read': name = 'Read'; break;\r\n    default: name = props.name;\r\n  }\r\n  return (\r\n    <div className=\"compartment\">\r\n      <h2>{name}</h2>\r\n      <BooksList books={props.books} changeShelf={props.changeShelf} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Compartment;","import React from 'react';\r\nimport Compartment from './Compartment';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/BookShelf.css';\r\n\r\nfunction BookShelf(props) {\r\n  let shelfs = props.shelfs;\r\n  return (\r\n    <div className=\"book-shelf\">\r\n      <header><h1>My Reads</h1></header>\r\n      <div className=\"compartments\">\r\n        {\r\n          shelfs.filter((shelf) => props[shelf].length > 0)\r\n          .map((shelf) => (\r\n            <Compartment\r\n              key={shelf}\r\n              name={shelf}\r\n              books={props[shelf]}\r\n              changeShelf={props.changeShelf}\r\n            />)\r\n          )\r\n        }\r\n      </div>\r\n      <div className=\"open-search\">\r\n          <Link to='/search'>Add a book</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookShelf;","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>  \r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react';\r\nimport Compartment from './Compartment';\r\nimport { Link } from 'react-router-dom';\r\nimport escapeRegExp from 'escape-string-regexp';\r\nimport * as bookAPI from '../api/BooksAPI';\r\nimport '../styles/SearchPage.css';\r\n\r\nclass SearchPage extends Component {\r\n  state = {\r\n    query: '',\r\n    shelfBooks: [],\r\n    newBooks: []\r\n  }\r\n\r\n  onQueryChange = (e) => {\r\n    let search = e.target.value;\r\n    let newBooks = [];\r\n    let shelfBooks = [];\r\n    this.setState({query: search});\r\n\r\n    /* Search for books.\r\n       All books found in shelf are stored in 'shelfBooks'.\r\n       Books not found are stored in 'newBooks'.\r\n       If book is in a shelf, give it a shelf property in which it's stored.\r\n    */\r\n    bookAPI.search(escapeRegExp(search.trim()))\r\n    .then(books => {\r\n      if(!books || books.error) {\r\n        this.setState({newBooks: [], shelfBooks: []});\r\n        return;\r\n      }\r\n      /*\r\n        filter returns true if books not found in shelf.\r\n        And these books are stored in 'newBooks'.\r\n      */\r\n      newBooks = books.filter(book => {\r\n        for(let shelf in this.props.booksID) {\r\n          if(this.props.booksID[shelf].includes(book.id)) {\r\n            book['shelf'] = shelf;\r\n            book['inShelf'] = true;\r\n            shelfBooks.push(book);\r\n            return false;\r\n          }\r\n        }\r\n        book['inShelf'] = false;\r\n        return true;\r\n      });\r\n\r\n      this.setState({shelfBooks, newBooks});\r\n    });\r\n  }\r\n\r\n  //Move the book between the search cmpartments, when the book is added or removed from shelf\r\n  changeShelf = (book, newShelf) => {\r\n    if(book.inShelf === true && newShelf === 'none') {\r\n      book.inShelf = false;\r\n      let removeFromOldShelf = this.state['shelfBooks'].filter(b => b.id !== book.id);\r\n      this.setState({shelfBooks: removeFromOldShelf, newBooks:[...this.state.newBooks, book]});\r\n    } else if (book.inShelf === false && newShelf !== 'none') {\r\n      book.inShelf = true;\r\n      let removeFromOldShelf = this.state['newBooks'].filter(b => b.id !== book.id);\r\n      this.setState({shelfBooks: [...this.state.shelfBooks, book] , newBooks: removeFromOldShelf});\r\n    }\r\n    \r\n    this.props.changeShelf(book, newShelf);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-page\">\r\n        <div className=\"search-bar\">\r\n          <Link className=\"close-search\" to=\"/\"></Link>\r\n          <input\r\n            value={this.state.query}\r\n            onChange={this.onQueryChange}\r\n            placeholder=\"Search by Name or Author\"\r\n          />\r\n        </div>\r\n        {(this.state.query) && (\r\n          <div className=\"results\">\r\n            <Compartment\r\n                  name={`Found ${this.state.newBooks.length} new book(s)`} \r\n                  books={this.state.newBooks}\r\n                  changeShelf={this.changeShelf}\r\n            />\r\n            <Compartment\r\n                  name={`Found ${this.state.shelfBooks.length} book(s) from shelf`} \r\n                  books={this.state.shelfBooks}\r\n                  changeShelf={this.changeShelf}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPage;","import React, { Component } from 'react';\nimport BookShelf from './components/BookShelf';\nimport SearchPage from './components/SearchPage';\nimport { Route } from 'react-router-dom';\nimport * as bookAPi from './api/BooksAPI';\nimport './App.css';\n\nclass App extends Component {\n  \n  state = {\n    currentlyReading: [],\n    wantToRead: [],\n    read: []\n  }\n\n  //Valid shelfs a book can be placed under.\n  validShelfs = ['currentlyReading', 'wantToRead', 'read'];\n\n  componentDidMount() {\n    bookAPi.getAll()\n    .then(books => {\n      let shelfs = {\n        currentlyReading: [],\n        wantToRead: [],\n        read: []\n      };\n      //Add each book to corresponding shelf.\n      books.forEach(book => {\n        shelfs[book.shelf].push(book);\n      });\n      //Update each shelf in the component state.\n      for(let shelf in shelfs) {\n        this.setState({[shelf]: shelfs[shelf]})\n      }\n    });\n  }\n\n  changeShelf = (book, shelf) => {\n    //If book was already in shelf, remove from old shelf.\n    if(book.shelf) {\n      let removeFromOldShelf = this.state[book.shelf].filter(b => b.id !== book.id);\n      this.setState({[book.shelf]: removeFromOldShelf});\n    }\n\n    //If book's new shelf exists, add to new shelf.\n    if(shelf !== 'none') {\n      book.shelf = shelf;\n      let addToNewShelf = [...this.state[shelf], book];\n      this.setState({[shelf]: addToNewShelf});\n    }\n\n    bookAPi.update(book, shelf);\n  }\n\n  //Get object containing shelf and corresponding books IDs.\n  getBooksID = () => {\n    let booksID = {};\n    this.validShelfs.forEach(shelf => {\n      booksID[shelf] = this.state[shelf].map(book => book.id);\n    });\n    return booksID;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Route\n          exact\n          path='/'\n          render={(props) =>\n            <BookShelf\n              {...props}\n              currentlyReading={this.state.currentlyReading} \n              wantToRead={this.state.wantToRead}\n              read={this.state.read}\n              shelfs = {this.validShelfs}\n              changeShelf={this.changeShelf}\n            />\n          }\n        />\n        <Route\n          exact\n          path=\"/search\"\n          render={(props) => \n            <SearchPage\n              {...props}\n              changeShelf={this.changeShelf}\n              booksID={this.getBooksID()}\n            />\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}